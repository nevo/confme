;; ------------------------------------------------------------------------------
;; Copyright 2011 Nevo (sakur.deagod@gmail.com)
;; ------------------------------------------------------------------------------

;; Load some useful tools
(setq load-path
      (append
       load-path
       (split-string (shell-command-to-string "find ~/.emacs.conf -type d"))))

;; multi-term
(require 'multi-term)
(setq multi-term-program "/bin/bash")
(setq multi-term-scroll-show-maximum-output t)

;; magit
(require 'magit)

;; anything
(require 'anything-startup)

;; diary
(diary)

(setq inhibit-eol-conversion t)

;; scheme/racket mode activation
(add-to-list 'auto-mode-alist '("\\.rkt$" . scheme-mode))

;; org mode activation
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

(global-font-lock-mode 1) ; for all buffers
(add-hook 'org-mode-hook 'turn-on-font-lock) ; org-mode buffers only

;; set exec-lists and PATH
(setenv "PATH" "/bin:/usr/bin:/usr/local/bin:/opt/local/bin:/build/trees/bin")
(setenv "P4CONFIG" ".p4config")

;; custom Emacs
(custom-set-variables
  '(line-number-mode t) ; show line and column number of cursor
  '(column-number-mode t)
  '(mouse-yank-at-point t)
  '(visible-bell t)
  '(user-mail-address "sakur.deagod@gmail.com"))

;; set up colors
(add-hook 'ediff-load-hook
          (lambda ()
            (set-face-foreground
	     ediff-current-diff-face-C "white")))

(defun good-colors ()
  (progn
    (set-background-color "Black")
    (set-foreground-color "White")
    (set-cursor-color "DarkSlateBlue")
    (set-border-color "DimGray")
    (set-mouse-color "DarkSlateBlue")
	 
    (set-face-background 'default "Black")
    (set-face-background 'region "DarkSlateGray")
    (set-face-background 'highlight "DarkSlateBlue")
    (set-face-background 'modeline "DarkSlateBlue") 
	 
    (set-face-foreground 'default "White")
    (set-face-foreground 'region "Ivory")
    (set-face-foreground 'highlight "LightGray")   
    (set-face-foreground 'modeline "LightGray")))

(when window-system (good-colors)) ; set color

;; a global abbreviation
(global-set-key "\M-n" 'bookmark-jump)

;; allow elisp evaluations anywhere
(global-set-key "\C-j" 'eval-print-last-sexp)

;; NOT USED
;; load my org notebook
(defun load-my-org-book ()
  (interactive)
  (switch-to-buffer (find-file "/Users/nevo/notes/notesdb/dev/dev_mac.org")))

(global-set-key "\C-o" 'load-my-org-book)

;; Abbreviation stuff
;(setq abbrev-file-name "~/.elisp/abbrev_defs")

;; reads abbreviation file
;(read-abbrev-file "~/.elisp/abbrev_defs")

;; Easier goto-line
(global-set-key "\M-;" 'goto-line)

;; Easier append-to-file
(global-set-key "\M-]" 'append-to-file)

;; my code formatter
;(defun magic-formatter (buf)
;  (interactive "buffer:")
;(load "formatter.el") 

;; treat all tabs to spaces
(defun my-c-mode-hook ()
  (setq c-basic-offset 4)
  (setq indent-tabs-mode nil)
  (setq show-trailing-whitespace t))
(add-hook 'c-mode-hook 'my-c-mode-hook)
(add-hook 'c++-mode-hook 'my-c-mode-hook)

(add-to-list 'auto-mode-alist '("\\.mm$" . objc-mode))

(defun my-objc-mode-hook ()
  (setq c-basic-offset 3)
  (setq indent-tabs-mode nil)
  (setq show-trailing-whitespace t)
  (setq gdb-many-windows t)
  (setq gdb-use-separate-io-buffer t)
  (setq gud-gdb-command-name "/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/libexec/gdb/gdb-i386-apple-darwin --arch i386 -q -f --annotate=3"))
(add-hook 'objc-mode-hook 'my-objc-mode-hook)
(add-hook 'c-mode-hook 'my-objc-mode-hook)

;; cedet
(cond ((file-exists-p "~/.emacs.conf/cedet/common/cedet.el")
         (load-file "~/.emacs.conf/cedet/common/cedet.el")
         (global-ede-mode t) ; Enable the Project management system
         (semantic-load-enable-code-helpers) ; Enable prototype help and smart completion
         ;(semanic-load-enable-excessive-code-helpers)
         (global-srecode-minor-mode 1) ; Enable template insertion menu

         ;; enable code completation and tag information (intellisense)
         (require 'semantic-ia)
         ;; enable exuberant ctags database
         (semantic-load-enable-primary-exuberent-ctags-support)))

;; hooks to use semantic
(defun my-cedet-hook ()
  (local-set-key [(control return)] 'semantic-ia-complete-symbol)
  (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
  (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
  (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle))
(add-hook 'c-mode-common-hook 'my-cedet-hook)

;; open url in external browser (firefox)
(setq browse-url-browser-function 'browse-url-firefox
      browse-url-new-window-flag t
      browse-url-firefox-new-window-is-tab t)    

;; ecb 
;(add-to-list 'load-path "/opt/tools-repo/cedet.git")
;(require 'ecb)

;; my exuberant ctags file creation func
(defun my-ctags-create (dir)
  "create ctags db file in specific dir"
  (interactive "DDir: ")
  (shell-command (format "/Users/nevo/bin/ctags -f %s/TAGS -e -R %s" dir dir)))

;; p5 facility tool
(defun p5-open (file)
  "do p5 open in Emacs"
  (interactive "fFile: ")
  (shell-command (format "p5 open %s" file))
  (find-file file))

;; some character typo ,like en-dash or em-dash
;(require 'typopunct)

;(put 'narrow-to-region 'disabled nil)

;; artist mode integration with ido
;; integrate ido with artist-mode
(defun artist-ido-select-operation (type)
  "Use ido to select a drawing operation in artist-mode"
  (interactive (list (ido-completing-read "Drawing operation: " 
					  (list "Pen" "Pen Line" "line" "straight line" "rectangle" 
						"square" "poly-line" "straight poly-line" "ellipse" 
						"circle" "text see-thru" "text-overwrite" "spray-can" 
						"erase char" "erase rectangle" "vaporize line" "vaporize lines" 
						"cut rectangle" "cut square" "copy rectangle" "copy square" 
						"paste" "flood-fill"))))
  (artist-select-operation type))

(defun artist-ido-select-settings (type)
  "Use ido to select a setting to change in artist-mode"
  (interactive (list (ido-completing-read "Setting: " 
					  (list "Set Fill" "Set Line" "Set Erase" "Spray-size" "Spray-chars" 
						"Rubber-banding" "Trimming" "Borders"))))
  (if (equal type "Spray-size") 
      (artist-select-operation "spray set size")
    (call-interactively (artist-fc-get-fn-from-symbol 
			 (cdr (assoc type '(("Set Fill" . set-fill)
					    ("Set Line" . set-line)
					    ("Set Erase" . set-erase)
					    ("Rubber-banding" . rubber-band)
					    ("Trimming" . trimming)
					    ("Borders" . borders)
					    ("Spray-chars" . spray-chars))))))))

(add-hook 'artist-mode-init-hook 
	  (lambda ()
	    (define-key artist-mode-map (kbd "C-c C-a C-o") 'artist-ido-select-operation)
	    (define-key artist-mode-map (kbd "C-c C-a C-c") 'artist-ido-select-settings)))

;; resize window
(defun v-resize (key)
  "interactively resize the window"  
  (interactive "cHit +/- to enlarge/shrink") 
  (cond                                  
   ((eq key (string-to-char "+"))                      
    (enlarge-window 1)             
    (call-interactively 'v-resize)) 
   ((eq key (string-to-char "-"))                      
    (enlarge-window -1)            
    (call-interactively 'v-resize)) 
   ((eq key ?\r) (discard-input))
   (t (call-interactively 'v-resize))))

(defun h-resize (key)
  "interactively resize the window horizontally"  
  (interactive "cHit +/- to enlarge/shrink horizontally") 
  (cond                                  
   ((eq key (string-to-char "+"))                      
    (enlarge-window-horizontally 1)             
    (call-interactively 'h-resize)) 
   ((eq key (string-to-char "-"))                      
    (enlarge-window-horizontally -1)            
    (call-interactively 'h-resize)) 
   ((eq key ?\r) (discard-input))
   (t (call-interactively 'h-resize))))

(global-set-key (kbd "C-c C-v +") 'v-resize)
(global-set-key (kbd "C-c C-h +") 'h-resize)

;;; Parse and generate a list of udid files

(setq max-lisp-eval-depth 20000)

(defun process-lines (list) 
  "Process a list of lines"
  (let ((e1 (car list))
	(e2 (cadr list)))
    (cond ((not (null e2))
	   (if (not (null (string-match "[0-9A-Za-z]\\{40\\}"
					e2)))
	       (progn (export-udid-file e1 e2)
		      (process-lines (cdr list)))
	     (process-lines (cdr list)))))))

(defun export-udid-file (devicename udid)
  "Save an Apple UDID file to the disk"
  (insert-string (concat "
		<dict>
			<key>deviceIdentifier</key>
			<string>"udid"</string>
			<key>deviceName</key>
			<string>"devicename"</string>
		</dict>")))

(defun process-udid-list ()
  "Process the udid list contained in current buffer"
  (interactive)
  (let* ((content (buffer-string))
	 (mybuffer (find-file "~/Desktop/udids/devices.ids")))
    (save-current-buffer
      (set-buffer mybuffer)
      (insert-string "\
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
<dict>
	<key>Device UDIDs</key>
	<array>")
      (process-lines (split-string content "\n" t))
      (insert-string "\
        </array>
</dict>
</plist>")
      (save-buffer)
      (kill-buffer mybuffer))))


;;;
;;; Basic typing aids for file and function header etc.
;;; following the VMware conventions.
;;;

(defun vmware-insert-file-header ()
  (interactive)
  (let ((name (car (split-string (buffer-name nil) "\\."))))
     (insert-string (concat "\
/* **********************************************************
 * Copyright " (int-to-string (nth 5 (decode-time)))
                  " VMware, Inc.  All rights reserved.
 * -- VMware Confidential
 * **********************************************************/

/*
 * " (buffer-name nil) " --
 *
 *      XXX: Brief description of this file.
 */
"))))


(defun vmware-insert-function-header (name)
  (interactive "sFunction name: ")
  (insert-string (concat "\
/*
 *-----------------------------------------------------------------------------
 *
 * " name " --
 *
 *      XXX
 *
 * Results:
 *      XXX
 *
 * Side effects:
 *      XXX
 *
 *-----------------------------------------------------------------------------
 */

void
" name "()
{
}


" )))

(defun vmware-insert-objc-header (name)
  (interactive "sFunction name: ")
  (insert-string (concat "\
/*
 *-----------------------------------------------------------------------------
 *
 * -[" name " ]--
 *
 *      XXX
 *
 * Results:
 *      XXX
 *
 * Side effects:
 *      XXX
 *
 *-----------------------------------------------------------------------------
 */

- (void)" name "
{
}


" )))


